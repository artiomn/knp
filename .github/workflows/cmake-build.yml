name: CMake build

on:
  # For the manual run.
  workflow_dispatch:
  # To run as dependent.
  workflow_call:
  workflow_run:
    workflows: ['Build and push Docker image']
    branches: [master]
    types:
      - completed
  push:
    branches: [ "master" ]
    paths:
      - 'knp/**'
      - 'examples/**'
      - 'CMakeLists.txt'
      - '.github/workflows/cmake-build.yml'
      - '!/doc/**'
      - '!/docker/**'
      - '!/tools/**'
      - '!/ci/**'
  pull_request:
    branches: [ "master" ]

jobs:
  linux_build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following configurations:
      # 1. <Linux, Debug, latest GCC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Debug, latest Clang compiler toolchain on the default runner image, default generator>
      matrix:
        os: [ubuntu-24.04, ubuntu-24.04-arm]
        build_type: [Debug]
        c_compiler: [gcc, clang]
        # arch: [amd64, arm64]
        include:
          - os: ubuntu-24.04
            arch: amd64
            build_threads_count: 8
          - os: ubuntu-24.04-arm
            arch: arm64
            build_threads_count: 6
          - c_compiler: gcc
            cpp_compiler: g++
          - c_compiler: clang
            cpp_compiler: clang++
          # - arch: amd64
          #  build_threads_count: 8
          #- arch: arm64
          #   build_threads_count: 1

    steps:
      - uses: actions/checkout@v4
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=build_${{ matrix.c_compiler }}" >> "$GITHUB_OUTPUT"

      # Install support for non-x86 emulation in Docker via QEMU.
      # Platforms: linux/arm64, linux/riscv64, linux/ppc64le, linux/s390x,
      #            linux/386, linux/arm/v7, linux/arm/v6
      # - name: Set-up Docker ARM emulation
      #  if: matrix.arch == 'arm64'
      #  run: |
      #    sudo apt-get update -q -y
      #    sudo apt-get -qq install -y qemu-system-arm qemu-user-static
      #    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes --credential yes

      - name: Configure
        run: >
          docker run --platform=linux/${{ matrix.arch }} --rm -v ${{ github.workspace }}:/KNP -w /KNP kasperskydh/knp-build-image cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DKNP_PYTHON_BUILD_WHEEL=ON
          -S .

      - name: Build
        run: docker run --platform=linux/${{ matrix.arch }} --rm -v ${{ github.workspace }}:/KNP -w /KNP kasperskydh/knp-build-image cmake --build ${{ steps.strings.outputs.build-output-dir }} --parallel ${{ matrix.build_threads_count }}
        timeout-minutes: 180

      - name: Test
        run: docker run --platform=linux/${{ matrix.arch }} --rm -v ${{ github.workspace }}:/KNP -w /KNP/${{ steps.strings.outputs.build-output-dir }}/knp/tests kasperskydh/knp-build-image ctest -V
        timeout-minutes: 180

      - name: Python Test
        run: docker run --platform=linux/${{ matrix.arch }} --rm -v ${{ github.workspace }}:/KNP -w /KNP/${{ steps.strings.outputs.build-output-dir }}/knp_python_framework kasperskydh/knp-build-image pytest

      - name: Create deb packages
        run: docker run --platform=linux/${{ matrix.arch }} --rm -v ${{ github.workspace }}:/KNP -w /KNP/${{ steps.strings.outputs.build-output-dir }} kasperskydh/knp-build-image cpack -G DEB
        timeout-minutes: 180

      - name: Upload deb packages
        if: matrix.c_compiler == 'gcc'
        uses: actions/upload-artifact@v4
        with:
          name: pkg-deb-${{ matrix.arch }}
          path: ${{ steps.strings.outputs.build-output-dir }}/_packages/

      - name: Upload Python wheel
        if: matrix.c_compiler == 'gcc'
        uses: actions/upload-artifact@v4
        with:
          name: pkg-python-${{ matrix.arch }}
          path: ${{ steps.strings.outputs.build-output-dir }}/knp_python_framework/dist/knp-*.whl

  non_linux_build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run:
      matrix:
        os: [macos-13, windows-latest]
        build_type: [Debug]
        c_compiler: [clang, cl]
        include:
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
            boost_install_dir: /Users/runner/work/boost/knp
            boost_platform_version: 13
            boost_toolset: clang
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            boost_install_dir: C:/
            boost_platform_version: 2022
            boost_toolset: msvc
        exclude:
          - os: windows-latest
            c_compiler: clang
          - os: macos-13
            c_compiler: cl

    steps:
      - uses: actions/checkout@v4
      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=build" >> "$GITHUB_OUTPUT"

      - name: Install Boost
        uses: MarkusJx/install-boost@v2.4.5
        id: install-boost
        with:
            boost_version: 1.81.0
            boost_install_dir: ${{ matrix.boost_install_dir }}
            platform_version: ${{ matrix.boost_platform_version }}
            toolset: ${{ matrix.boost_toolset }}

      - name: Configure CMake
        env:
          BOOST_ROOT: ${{ steps.install-boost.outputs.BOOST_ROOT }}
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S .

      - name: Build
        # Build with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --parallel 8
        timeout-minutes: 180

      - name: Test
        run: ctest --build-config ${{ matrix.build_type }} -V
        timeout-minutes: 180
        working-directory: ${{ steps.strings.outputs.build-output-dir }}/knp/tests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}_executables
          path: ${{ steps.strings.outputs.build-output-dir }}/bin

  publish:
    needs: [linux_build, non_linux_build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: pkg-*
      - shell: bash
        run: |
          ls -1
      - name: Create new release
        id: create_release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        env:
          # This token is provided by Actions.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          files: |
            pkg-deb
            pkg-python
            LICENSE.txt
            NOTICE.txt
          body: |
            Release creating added to CI
          draft: false
          prerelease: false

    # - name: Publish package to the PyPI
      # Already on push in the master branch.
      # if: startsWith(github.head_ref, 'master')
    #  if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    #  uses: pypa/gh-action-pypi-publish@release/v1
    #  with:
    #    password: ${{ secrets.PYPI_API_TOKEN }}
    #    repository_url: https://upload.pypi.org/legacy/
    #    skip_existing: true
    #    print_hash: true
